#! /usr/bin/env node

const yargs = require('yargs/yargs');
const {hideBin} = require('yargs/helpers');
const fs = require('fs');
const path = require('path');

const packageJsonPath = path.join(__dirname, '../package.json');
const {name, version, description} = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));

// Hard-coded available presets
const availablePresets = ['TEC'];

// Function to initialize webpack.config.js with a preset
function initWebpackConfig(preset) {
	if (preset && !availablePresets.includes(preset)) {
		console.error(`Preset ${preset} is not available. Available presets: ${availablePresets.join(', ')}`);
		process.exit(1);
	}

	const webpackConfigPath = path.join(process.cwd(), 'webpack.config.js');

	if (fs.existsSync(webpackConfigPath)) {
		console.warn('A webpack.config.js file already exists: it was not overwritten.');
		console.log('Here are the generated contents:\n');
		console.log(fs.readFileSync(webpackConfigPath, 'utf-8'));
		return;
	}

	const configTemplate = `// This is your custom webpack.config.js file

const { merge } = require('webpack-merge');
const defaultConfig = require('@wordpress/scripts/config/webpack.config');

module.exports = merge(defaultConfig, {
    // Add custom configuration here
    ${preset ? `// Custom configuration for preset: ${preset}` : ''}
});

// Example of how to add a new entry point:
// entry: {
//     ...defaultConfig.entry,
//     myPlugin: './src/index.js'
// },
`;

	require('fs').writeFileSync('webpack.config.js', configTemplate);
	console.log(`Custom webpack.config.js created with preset: ${preset || 'Default'}`);
}

const cliHeader = `${name} v${version}\n${description}\n`;

console.log(cliHeader);

const argv = yargs(hideBin(process.argv)).command(
	'init [--preset|-p <preset>]',
	'Initialize a custom webpack.config.js file',
	yargs => {
		return yargs.option('preset', {
			alias: 'p',
			describe: 'Configuration preset to use',
			type: 'string',
			choices: availablePresets,
		});
	},
	argv => initWebpackConfig(argv.preset),
).command(
	'preset-list',
	'List available configuration presets',
	yargs => {},
	() => console.log(`Available presets: ${availablePresets.join(', ')}`),
).option('help', {
	alias: 'h',
	describe: 'Show help',
	type: 'boolean',
}).demandCommand(1, 'You need to specify a command. Use --help for more information.').argv;
